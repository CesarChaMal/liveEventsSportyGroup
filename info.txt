ng new school-registration-system
nvm use v18.17.1
ng generate component RegistrationForm
ng generate component CourseList
ng generate component StudentProfile
ng generate service services/registration
ng generate service services/course
ng generate service services/student

nvm use v18.17.1
ng new school-registration-system --directory=src/main/webapp/app
cd src/main/webapp/app
ng generate component RegistrationForm
ng generate component CourseList
ng generate component StudentProfile
ng generate service services/registration
ng generate service services/course
ng generate service services/student

or

nvm use v18.17.1
ng generate component src/main/webapp/app/RegistrationForm
ng generate component src/main/webapp/app/CourseList
ng generate component src/main/webapp/app/StudentProfile
ng generate service src/main/webapp/app/services/registration
ng generate service src/main/webapp/app/services/course
ng generate service src/main/webapp/app/services/student

ng build --configuration production

mvn clean package
mvn clean package -Dspring.profiles.active=dev
mvn clean package -Dspring.profiles.active=test
mvn clean package -Dspring.profiles.active=prod

mvn clean package -Pdev
mvn clean package -Ptest
mvn clean package -Pprod

mvn spring-boot:run
mvn spring-boot:run -Dspring-boot.run.profiles=dev
mvn spring-boot:run -Dspring-boot.run.profiles=test
mvn spring-boot:run -Dspring-boot.run.profiles=prod

java -jar school-registration-system-0.0.1-SNAPSHOT.jar
java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev
java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --spring.profiles.active=test
java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod

java -jar F:\IdeaProjects\school-registration-system\target\school-registration-system-0.0.1-SNAPSHOT.jar
java -jar /f/IdeaProjects/school-registration-system/target/school-registration-system-0.0.1-SNAPSHOT.jar
java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar

jar tf target/school-registration-system-0.0.1-SNAPSHOT.jar | grep static

mvn clean package && java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar
mvn clean package -Pdev && java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev
mvn clean package -Ptest && java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --spring.profiles.active=test
mvn clean package -Pprod && java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod

docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:7.12.1
docker run -d -p 9200:9200 -e "discovery.type=single-node" -e "xpack.security.enabled=false" elasticsearch:8.6.0

netstat -aon | findstr :8080
taskkill /F /PID 3448

sudo lsof -i :8080
sudo netstat -tulnp | grep :8080
sudo kill -9 PID


mysql -u Ces_C -p
ALTER USER 'Ces_C'@'localhost' IDENTIFIED BY 'pass';

echo "ALTER USER 'Ces_C'@'localhost' IDENTIFIED BY 'pass';" | mysql -u Ces_C -p


mysql -u root -p
GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY 'pass' WITH GRANT OPTION;
FLUSH PRIVILEGES;

echo "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY 'pass' WITH GRANT OPTION; FLUSH PRIVILEGES;" | mysql -u root -p

//Running Development Mode (With JSON Server)
npm start

//Running Development Mode (Without JSON Server)
ng serve --configuration development

//Running Production Mode
npm run build
npx http-server src/main/resources/static -p 8080

//Test
curl -X GET "http://localhost:3000/api/auth/login?email=john@example.com&password=pass123"
curl -X GET "http://localhost:3000/users?email=john.doe@example.com&password=pass123"
curl -X GET "http://localhost:3000/users?email=jane.doe@example.com&password=pass456"
curl -X GET "http://localhost:3000/students?id=1"
curl -X GET "http://localhost:3000/students?id=2"
curl -X GET "http://localhost:3000/courses"

//Spring Boot, you can also package and run
mvn clean package
java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar

//Running Production Mode (Without Building)
ng serve --configuration production

//Open Swagger UI
Swagger UI: http://localhost:8080/swagger-ui.html or http://localhost:8080/swagger-ui/index.html
OpenAPI Docs: http://localhost:8080/v3/api-docs


//Verify if Elastic Search is running
curl -X GET "http://localhost:9200"
curl -X GET "http://localhost:9200" -H "X-Elastic-Product: Elasticsearch"

Step 1: Start the Services
Run the following command to start all services:

docker-compose -f application_all.yml up --build

üöÄ Step 2: Verify the Services
Check MySQL:

docker logs <mysql_container_id>
Check Kafka:

docker logs <kafka_container_id>
Check Elasticsearch:

curl -X GET "http://localhost:9200"
Expected output:

"version" : {
  "number" : "8.6.0",
}

mvn clean package && java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar
tail -f logs/spring.log

# Stop any running containers
docker-compose down

# Build and start services
docker-compose up --build -d

# Verify logs
docker-compose logs -f app

cd src/main/webapp
npm install
ng build --configuration production


cd ../../..
mvn clean package
java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar


curl -X POST -H "Content-Type: application/json" \
-d '{"email":"john@example.com","password":"password123"}' \
http://localhost:8080/api/auth/login

Authorization: Bearer <JWT_TOKEN>


/ /Running Docker Compose with different environments:
Default (.env):

docker-compose up -d

// Development (explicitly set if you create a separate .env.dev):
docker-compose --env-file .env.dev up -d

// Testing (.env.test):
docker-compose --env-file .env.test up -d

// Production (.env.prod):
docker-compose --env-file .env.prod up -d

// Development build (with source maps):
mvn clean package -Pdev

// Test build (same as dev config here, also with source maps):
mvn clean package -Ptest

// Production build (optimized, no source maps):
mvn clean package -Pprod

cat src/main/resources/static/main*.js | grep useMockApi
cat target/classes/static/main.js | grep useMockApi

cat src/main/resources/static/main*.js | grep production
cat target/classes/static/main.js | grep production


cat src/main/resources/static/main*.js | grep -e useMockApi -e production
cat target/classes/static/main.js | grep -e useMockApi -e production

cat src/main/resources/static/main*.js | egrep "useMockApi|production"
cat target/classes/static/main.js | egrep "useMockApi|production"

grep -E "useMockApi|production" src/main/resources/static/main*.js
grep -E "useMockApi|production" target/classes/static/main.js


find src/main/resources/static target/classes/static -type f -name "main*.js" | xargs -I {} bash -c 'echo "üîç Searching in: {}"; grep -E "useMockApi|production" "{}"'
find target/classes/static/main.js -type f -name "main*.js" | xargs -I {} bash -c 'echo "üîç Searching in: {}"; grep -E "useMockApi|production" "{}"'



$ cat src/main/resources/static/main*.js | grep useMockApi
  useMockApi: true
    if (environment.useMockApi) {
    if (!environment.production && environment.useMockApi) {
    if (!environment.production && environment.useMockApi) {
    if (!environment.production && environment.useMockApi) {

MSI@MSITITAN18HX MINGW64 /f/IdeaProjects/school-registration-system (main)
$ cat target/classes/static/main.js | grep useMockApi
  useMockApi: true
    if (environment.useMockApi) {
    if (!environment.production && environment.useMockApi) {
    if (!environment.production && environment.useMockApi) {
    if (!environment.production && environment.useMockApi) {


rm -rf node_modules package-lock.json dist target
npm install
mvn clean package -Pprod && npm run build --configuration=production
mvn clean package -Ptest && npm run build --configuration=test
mvn clean package -Pdev && npm run build --configuration=development




curl -X POST http://localhost:8080/api/auth/login \
     -H "Content-Type: application/json" \
     -d '{"email": "john.doe@example.com", "password": "pass123"}'



curl -X POST http://localhost:8080/api/auth/login \
     -H "Content-Type: application/json" \
     -d '{"email": "jane.doe@example.com", "password": "pass456"}'

POST http://localhost:8080/api/auth/register
Content-Type: application/json

{
    "firstName": "Alice",
    "lastName": "Smith",
    "email": "alice.smith@example.com",
    "password": "mypassword123"
}



mvn clean package spring-boot:run -Dspring-boot.run.arguments="--debug"
mvn clean package -Pdev && java -jar target/school-registration-system-0.0.1-SNAPSHOT.jar --debug


curl -H "Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqb2huLmRvZUBleGFtcGxlLmNvbSIsImlhdCI6MTc0MTU2MTU3MCwiZXhwIjoxNzQxNjQ3OTcwfQ.xfnhhAAUHSBAHXDtu-BY500Yc8fyoksuNUYjri0n0d4" http://localhost:8080/api/auth/check-token


// Checking the token signature
https://jwt.io/

// Checking the token expiration
date -d @1741647970

// Checking the token payload
pip install pyjwt
python verifyTokenSignature.py


